# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys,os
import PySide2
 
dirname = os.path.dirname(PySide2.__file__)
plugin_path = os.path.join(dirname, 'plugins', 'platforms')
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = plugin_path

from PyQt5 import QtCore, QtGui, QtWidgets

def encrypt_action():
    # 获取用户输入的文本
  
    plain_text= ui.lineEdit.text()
    key = ui.lineEdit_2.text()

    # 在这里执行加密操作，并将结果显示在textEdit中
    encrypted_text = encrypt(plain_text,key)
    ui.lineEdit_3.setText(encrypted_text)

def decrypt_action():
    # 获取用户输入的文本
    encrypted_text = ui.lineEdit_4.text()
    key = ui.lineEdit_5.text()

    # 在这里执行解密操作，并将结果显示在textEdit中
    plain_text = decrypt(encrypted_text, key)
    ui.lineEdit_6.setText(plain_text)

def brute_force_action():
    # 获取用户输入的密文
    plain_text= ui.lineEdit_7.text()
    encrypted_text = ui.lineEdit_8.text()

    # 在这里执行暴力破解操作，并将结果显示在ui.textEdit中
    brute_force_result = brute_force(plain_text,encrypted_text)
    ui.textEdit.setPlainText(brute_force_result)


#S-DES置换和S盒等设置
P10 = (3, 5, 2, 7, 4, 10, 1, 9, 8, 6)  #P10置换表
P8 = (6, 3, 7, 4, 8, 5, 10, 9)  #P8置换表
IP = (2, 6, 3, 1, 4, 8, 5, 7)  # 初始置换表
IP_INVERSE = (4, 1, 3, 5, 7, 2, 8, 6)  #逆初始置换表
LEFT_SHIFT_1 = (2, 3, 4, 5, 1)  #密钥左移1位的置换表
LEFT_SHIFT_2 = (3, 4, 5, 1, 2)  #密钥左移2位的置换表
EP_BOX = (4, 1, 2, 3, 2, 3, 4, 1)  #扩展置换表
S_BOX_1 = [[(1, 0, 3, 2), (3, 2, 1, 0), (0, 2, 1, 3), (3, 1, 0, 2)],
           [(0, 1, 2, 3), (2, 3, 1, 0), (3, 0, 1, 2), (2, 1, 0, 3)]]  #S盒1
S_BOX_2 = [[(0, 1, 2, 3), (2, 3, 1, 0), (3, 0, 1, 2), (2, 1, 0, 3)],
           [(1, 0, 3, 2), (3, 2, 1, 0), (0, 2, 1, 3), (3, 1, 0, 2)]]  #S盒2
P4 = (2, 4, 3, 1)  #P4置换表


#辅助函数

def permute(data, table):
    #根据指定的置换表进行数据置换#
    return ''.join(data[i - 1] for i in table)

def expand_permute(data, table):
    #根据指定的扩展置换表进行数据扩展置换#
    return ''.join(data[i - 1] for i in table)

def xor(data1, data2):
    #执行数据的异或操作#
    return ''.join(str(int(a) ^ int(b)) for a, b in zip(data1, data2))

def sbox(data, sbox_table):
    #执行S盒替代操作#
    row = int(data[0] + data[3], 2)
    col = int(data[1] + data[2], 2)
    return bin(sbox_table[row][col][0])[2:].zfill(2) + bin(sbox_table[row][col][1])[2:].zfill(2)

def generate_subkeys(key):
    #生成S-DES的子密钥#
    key = permute(key, P10)
    subkeys = [key]
    for i in range(2):
        key = left_shift(key[:5], LEFT_SHIFT_1) + left_shift(key[5:], LEFT_SHIFT_1)
        subkeys.append(permute(key, P8))
    return subkeys

def left_shift(data, shift_table):
    #执行密钥的左移操作#
    return ''.join(data[i - 1] for i in shift_table)

def encrypt(plain_text, key):
    #执行S-DES加密操作#
    #执行初始置换IP
    plain_text = permute(plain_text, IP)

    #生成子密钥
    subkeys = generate_subkeys(key)

    #第一轮
    plain_text, right_half = plain_text[:4], plain_text[4:]
    expanded_right = expand_permute(right_half, EP_BOX)
    xor_result = xor(expanded_right, subkeys[0])
    sbox_result = sbox(xor_result, S_BOX_1)
    p4_result = permute(sbox_result, P4)
    new_right_half = xor(plain_text, p4_result)

    #第二轮
    left_half = right_half
    right_half = new_right_half
    expanded_right = expand_permute(right_half, EP_BOX)
    xor_result = xor(expanded_right, subkeys[1])
    sbox_result = sbox(xor_result, S_BOX_2)
    p4_result = permute(sbox_result, P4)
    new_right_half = xor(left_half, p4_result)

    #最终置换
    encrypted_text = new_right_half + right_half
    encrypted_text = permute(encrypted_text, IP_INVERSE)

    return encrypted_text

def decrypt(encrypted_text, key):
    #执行S-DES解密操作#
    #执行初始置换IP
    encrypted_text = permute(encrypted_text, IP)

    #生成子密钥
    subkeys = generate_subkeys(key)

    #第一轮
    encrypted_text, right_half = encrypted_text[:4], encrypted_text[4:]
    expanded_right = expand_permute(right_half, EP_BOX)
    xor_result = xor(expanded_right, subkeys[1])
    sbox_result = sbox(xor_result, S_BOX_2)
    p4_result = permute(sbox_result, P4)
    new_right_half = xor(encrypted_text, p4_result)

    #第二轮
    left_half = right_half
    right_half = new_right_half
    expanded_right = expand_permute(right_half, EP_BOX)
    xor_result = xor(expanded_right, subkeys[0])
    sbox_result = sbox(xor_result, S_BOX_1)
    p4_result = permute(sbox_result, P4)
    new_right_half = xor(left_half, p4_result)

    #最终置换
    plain_text = new_right_half + right_half
    plain_text = permute(plain_text, IP_INVERSE)

    return plain_text

def brute_force(plain_text, encrypted_text):
    brute_force_result = "暴力破解结果：\n"
    for key in range(1024):  # 10位二进制密钥
        key_binary = format(key, '010b')  # 将整数表示为10位二进制字符串
        decrypted_text = decrypt(encrypted_text, key_binary)
        if decrypted_text == plain_text:
            brute_force_result += f"Key: {key_binary} => Decrypted Text: {decrypted_text}\n"

    return brute_force_result
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(446, 616)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 80, 81, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 110, 101, 16))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(160, 80, 211, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(160, 110, 211, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(150, 150, 75, 24))
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(100, 220, 91, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(160, 180, 211, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(70, 260, 101, 16))
        self.label_4.setObjectName("label_4")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(160, 220, 211, 20))
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 300, 75, 24))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(80, 290, 54, 16))
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(60, 380, 81, 16))
        self.label_6.setObjectName("label_6")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(160, 260, 211, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(100, 410, 54, 20))
        self.label_7.setObjectName("label_7")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(160, 330, 211, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(150, 450, 75, 24))
        self.pushButton_3.setObjectName("pushButton_3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(140, 490, 231, 81))
        self.textEdit.setObjectName("textEdit")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(80, 180, 81, 16))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(90, 330, 71, 16))
        self.label_9.setObjectName("label_9")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(160, 380, 211, 20))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(160, 410, 211, 20))
        self.lineEdit_8.setObjectName("lineEdit_8")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "明文（8位）：："))
        self.label_2.setText(_translate("MainWindow", "密钥（10位）："))
        self.pushButton.setText(_translate("MainWindow", "加密"))
        self.label_3.setText(_translate("MainWindow", "密文："))
        self.label_4.setText(_translate("MainWindow", "密钥（10位）："))
        self.pushButton_2.setText(_translate("MainWindow", "解密"))
        self.label_6.setText(_translate("MainWindow", "明文（8位）："))
        self.label_7.setText(_translate("MainWindow", "密文："))
        self.pushButton_3.setText(_translate("MainWindow", "暴力破解"))
        self.label_8.setText(_translate("MainWindow", "加密结果："))
        self.label_9.setText(_translate("MainWindow", "解密结果："))

if __name__=='__main__' :
    app = QtWidgets . QApplication(sys . argv)
    MainWindow = QtWidgets . QMainWindow()
    ui = Ui_MainWindow() 
    ui. setupUi (MainWindow) 
    ui.pushButton.clicked.connect(encrypt_action)
    ui.pushButton_2.clicked.connect(decrypt_action)
    ui.pushButton_3.clicked.connect(brute_force_action)
    MainWindow. show()
    sys. exit(app.exec_ ())
